#! /usr/bin/env python3

import os

# global config
NEBULA_CONTROL_DIR = os.path.dirname(os.path.realpath(__file__))
os.environ["NEBULA_CONTROL_DIR"] = NEBULA_CONTROL_DIR

# import dependencies
from argparse import ArgumentParser

from ansible import context
from ansible.utils.display import initialize_locale
from ansible.module_utils.common.collections import ImmutableDict

# import all actions
from actions import (
    add_node,
    remove_node,
    generate_node,
    list_nodes,
    push_config,
    edit_config,
    update_groups,
)


if __name__ == "__main__":
    # parse arguments
    parser = ArgumentParser()
    subparser = parser.add_subparsers(dest="command")
    subparser.required = True

    # `add` arguments {{{
    add_args = subparser.add_parser("add")
    add_args.add_argument("name", type=str, help="Name of the client node")
    add_args.add_argument(
        "--ip", type=str, help="Public IP address of the client node to be added", required=True
    )
    add_args.add_argument(
        "--ssh-user", type=str, help="User account to SSH into on the client node", default="root"
    )
    add_args.add_argument(
        "--ssh-port",
        type=int,
        help="Port on which sshd is listening on the client node",
        default=22,
    )
    add_args.add_argument(
        "--nebula-port",
        type=int,
        help="Port on which nebula must listen on the client node",
        default=4242,
    )
    add_args.add_argument(
        "--lighthouse",
        type=bool,
        help="Whether or not the node is a lighthouse",
        default=False,
    )
    add_args.add_argument(
        "--ufw",
        type=bool,
        help="Set up firewall rules on the client node",
        default=True,
    )
    add_args.add_argument(
        "--docker-ufw",
        type=bool,
        help="Set up firewall rules for Docker containers on the client node",
        default=False,
    )
    add_args.add_argument(
        "--groups",
        nargs="+",
        help="Add host to group",
        default=[],
    )
    # }}}

    # `remove` arguments {{{
    remove_args = subparser.add_parser("remove")
    remove_args.add_argument("name", type=str, help="Name of the client node")
    # }}}

    # `generate` arguments {{{
    generate_args = subparser.add_parser("generate")
    generate_args.add_argument("name", type=str, help="Name of the client node")
    generate_args.add_argument(
        "--groups",
        nargs="+",
        help="Add host to group",
        default=[],
    )
    # }}}

    # `status` arguments {{{
    status_nodes_args = subparser.add_parser("status")
    # }}}

    # `sync` arguments {{{
    sync_args = subparser.add_parser("sync")
    sync_args.add_argument("name", type=str, help="Name of the client node")
    # }}}

    # `edit` arguments {{{
    edit_args = subparser.add_parser("edit")
    edit_args.add_argument("name", type=str, help="Name of the client node")
    edit_args.add_argument("--key", type=str, help="Key to edit")
    # }}}

    # `groups` arguments {{{
    groups_args = subparser.add_parser("groups")
    groups_args.add_argument("name", type=str, help="Name of the client node")
    groups_args.add_argument(
        "--add",
        nargs="+",
        help="Add host to groups",
        default=[],
    )
    groups_args.add_argument(
        "--remove",
        nargs="+",
        help="Remove host from groups",
        default=[],
    )
    # }}}

    args = parser.parse_args()

    # initialize ansible locale
    initialize_locale()

    # default CLI args
    context.CLIARGS = ImmutableDict(
        tags={},
        listtags=False,
        listtasks=False,
        listhosts=False,
        syntax=False,
        connection="smart",
        module_path=None,
        forks=100,
        ssh_common_args=None,
        ssh_extra_args=None,
        sftp_extra_args=None,
        scp_extra_args=None,
        become=None,
        become_method=None,
        become_user=None,
        verbosity=True,
        check=False,
        start_at_task=None,
    )

    # fire routine based on input command
    if args.command == "add":
        add_node(args)
    elif args.command == "remove":
        remove_node(args)
    elif args.command == "generate":
        generate_node(args)
    elif args.command == "status":
        list_nodes(args)
    elif args.command == "sync":
        push_config(args)
    elif args.command == "edit":
        edit_config(args)
    elif args.command == "groups":
        update_groups(args)
    else:
        print(f"Unknown command: {args.command}")
