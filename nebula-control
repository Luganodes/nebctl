#! /usr/bin/env python3

import os

from argparse import ArgumentParser

from ansible import context
from ansible.module_utils.common.collections import ImmutableDict

# import all actions
from actions import add_node, remove_node


# global config
NEBULA_CONTROL_DIR = os.path.dirname(os.path.realpath(__file__))
os.environ["NEBULA_CONTROL_DIR"] = NEBULA_CONTROL_DIR

if __name__ == "__main__":
    # parse arguments
    parser = ArgumentParser()
    subparser = parser.add_subparsers(dest="command")
    subparser.required = True

    # `add-node` arguments {{{
    add_node_args = subparser.add_parser("add-node")
    add_node_args.add_argument(
        "--ip", type=str, help="Public IP address of the client node to be added", required=True
    )
    add_node_args.add_argument("--name", type=str, help="Name of the client node", required=True)
    add_node_args.add_argument(
        "--ssh-user", type=str, help="User account to SSH into on the client node", default="root"
    )
    add_node_args.add_argument(
        "--ssh-port",
        type=int,
        help="Port on which sshd is listening on the client node",
        default=22,
    )
    add_node_args.add_argument(
        "--nebula-port",
        type=int,
        help="Port on which nebula must listen on the client node",
        default=4242,
    )
    add_node_args.add_argument(
        "--lighthouse",
        type=bool,
        help="Whether or not the node is a lighthouse",
        default=False,
    )
    add_node_args.add_argument(
        "--ufw",
        type=bool,
        help="Set up firewall rules on the client node",
        default=True,
    )
    add_node_args.add_argument(
        "--docker-ufw",
        type=bool,
        help="Set up firewall rules for Docker containers on the client node",
        default=False,
    )
    # }}}

    # `remove-node` arguments {{{
    remove_node_args = subparser.add_parser("remove-node")
    remove_node_args.add_argument("--name", type=str, help="Name of the client node", required=True)
    # }}}

    args = parser.parse_args()

    # default CLI args
    context.CLIARGS = ImmutableDict(
        tags={},
        listtags=False,
        listtasks=False,
        listhosts=False,
        syntax=False,
        connection="smart",
        module_path=None,
        forks=100,
        ssh_common_args=None,
        ssh_extra_args=None,
        sftp_extra_args=None,
        scp_extra_args=None,
        become=None,
        become_method=None,
        become_user=None,
        verbosity=True,
        check=False,
        start_at_task=None,
    )

    # fire routine based on input command
    if args.command == "add-node":
        add_node(args)
    elif args.command == "remove-node":
        remove_node(args)
    else:
        print(f"Unknown command: {args.command}")
