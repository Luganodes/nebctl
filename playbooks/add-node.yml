---

- hosts: localhost
  tasks:
    - name: Adding target to in-memory inventory
      add_host:
        name: "{{ public_ip }}"
        groups: target_node
        ansible_user: "{{ ssh_user | default('root') }}"
        ansible_ssh_port: "{{ ssh_port | default(22) }}"

- name: Adding node to admin panel
  hosts: localhost
  tasks:
    - name: Creating node directory
      file:
        path: "{{ nebula_control_dir }}/hosts/{{ node_name }}"
        state: directory

    - name: Signing certificates
      command: nebula-cert sign -ca-key "{{ nebula_control_dir }}/ca/ca.key" --ca-crt "{{ nebula_control_dir }}/ca/ca.crt" -out-key "{{ nebula_control_dir }}/hosts/{{ node_name }}/host.key" -out-crt "{{ nebula_control_dir }}/hosts/{{ node_name }}/host.crt" -name "{{ node_name }}" -ip "{{ nebula_ip }}/16" -groups "{{ nebula_groups }}"

    - name: Generating node config with lighthouse hosts
      copy:
        src: "{{ node_config }}"
        dest: "{{ nebula_control_dir }}/hosts/{{ node_name }}/config.yml"


        
- name: Setting up target node
  hosts: target_node
  vars_prompt:
  - name: "ansible_sudo_pass"
    prompt: "[sudo] password"
    private: yes
  become: yes
  become_method: community.general.sudosu
  vars:
    enable_ufw: "{{ ufw | default(true) }}"
    enable_docker_ufw: "{{ docker_ufw | default(false) }}"
  tasks:
    - name: Installing Nebula binaries
      unarchive:
        src: https://github.com/slackhq/nebula/releases/download/v1.6.0/nebula-linux-amd64.tar.gz
        dest: /usr/bin
        mode: 0755
        remote_src: yes

    - name: Creating Nebula config directory
      file:
        path: /etc/nebula
        state: directory
        mode: 0755


    - name: copy nebula configs to node
      copy:
        src: "{{ nebula_control_dir }}/hosts/{{ node_name }}/"
        dest: "/etc/nebula/"

    - name: copy certs to node
      copy: 
        src: "{{ nebula_control_dir }}/ca/ca.crt"
        dest: "/etc/nebula"

    - name: copy service config to node
      copy: 
        src: "{{ nebula_control_dir }}/defaults/nebula.service"
        dest: "/etc/systemd/system"        

    - name: copy network config to node
      copy:
        src: "{{ network_config }}"
        dest: "/etc/systemd/network/nebula1.network"
 
    - name: Restarting systemd-resolved
      systemd:
        name: systemd-resolved
        state: restarted

    - name: Restarting systemd-networkd
      systemd:
        name: systemd-networkd
        state: restarted

    - name: Enabling and starting Nebula service
      systemd:
        name: nebula
        enabled: true
        state: started

    - name: Configuring UFW rules
      command: "{{ item }}"
      with_items:
        - "ufw allow 4242/udp"
        - "ufw allow {{ ssh_port }}/tcp"
        - "ufw allow in on nebula1"
        - "ufw --force enable"
        - "ufw reload"
      when: enable_ufw | bool

    - name: Enabling UFW
      systemd:
        name: ufw
        enabled: true
        state: started
      when: enable_ufw | bool

    - name: Fetching Docker UFW rules
      synchronize: 
        src: "{{ nebula_control_dir }}/defaults/docker-ufw.rules"
        dest: "/tmp"
        dest_port: "{{ ssh_port }}"
        mode: push
      delegate_to: localhost
      when: enable_docker_ufw | bool

    - name: Configuring Docker UFW rules
      shell: "{{ item }}"
      with_items:
        - "cat /tmp/docker-ufw.rules >> /etc/ufw/after.rules"
        - "ufw reload"
      when: enable_docker_ufw | bool
